# SCOPE http

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 10m;
lua_shared_dict auto_ssl_settings 64k;

# Initial setup tasks.
init_by_lua_block {
	auto_ssl = (require "resty.auto-ssl").new()
	
	-- Define a function to determine which SNI domains to automatically handle
	-- and register new certificates for.
	auto_ssl:set("allow_domain", function(domain)
		-- Dissalow empty domains
		if not domain or domain == '' or domain == nil or domain == 'localhost' then
		    return false;
        end

        local domainCheckUri = os.getenv("DOMAIN_CHECK_ENDPOINT")
        if not domainCheckUri or domainCheckUri == '' or domainCheckUri == nil then
            return true;
        end

        local http = require("resty.http");
        local httpc = http.new();
        httpc:set_timeout(5000);

        local uri = domainCheckUri:gsub(":domain", domain);
        ngx.log(ngx.NOTICE, "Querying for custom domain: " .. domain);
        local res, err = httpc:request_uri(uri, {
            method = "GET",
            ssl_verify = false,
        });

        if not res then
            ngx.log(ngx.NOTICE, "failed to request: " .. err);
            return false;
        end

        if res.status == 200 then
            return true;
        end

        if res.status == 404 then
            ngx.log(ngx.NOTICE, "Domain not found (404)");
            return false;
        end

        ngx.log(ngx.NOTICE, "Unexpected response from API: " .. res.status);
        return false;
	end)

    -- Certificate storage
	local storage_driver = os.getenv("STORAGE_DRIVER");
	if not storage_driver or storage_driver == '' or storage_driver == nil or storage_driver == 'file' then
	    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.file");
	elseif storage_driver == 'redis'
	    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
	    auto_ssl:set("redis", {
	        host = os.getenv("REDIS_HOST"),
	        port = os.getenv("REDIS_PORT")
        })
	end
    local storage_dir = os.getenv("STORAGE_DIR")
    if not storage_dir or storage_dir == '' or storage_dir == nil then
        storage_dir = "/cache/ssl"
    end
	auto_ssl:set("dir", storage_dir)
	
	auto_ssl:init()
}

init_worker_by_lua_block {
	auto_ssl:init_worker()
}

# Internal server running on port 8999 for handling certificate tasks.
server {
	listen 127.0.0.1:8999;
	
	# see instructions for installation: https://github.com/GUI/lua-resty-auto-ssl#installation
	# Increase the body buffer size, to ensure the internal POSTs can always
	# parse the full POST contents into memory.
	client_body_buffer_size 128k;
	client_max_body_size 128k;
        
	location / {
		content_by_lua_block {
			auto_ssl:hook_server()
		}
	}
}
